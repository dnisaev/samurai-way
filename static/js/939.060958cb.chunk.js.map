{"version":3,"file":"static/js/939.060958cb.chunk.js","mappings":"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","sources":["assets/images/default-avatar.svg","webpack://samurai-way/./src/components/common/Paginator/Paginator.module.css?6caa","components/common/Paginator/Paginator.tsx","webpack://samurai-way/./src/components/Users/Users.module.css?b9d0","components/Users/User.tsx","components/Users/Users.tsx","../node_modules/reselect/src/utils.ts","../node_modules/reselect/src/autotrackMemoize/proxy.ts","../node_modules/reselect/src/weakMapMemoize.ts","../node_modules/reselect/src/createSelectorCreator.ts","../node_modules/reselect/src/createStructuredSelector.ts","redux/users-selectors.ts","components/Users/UsersContainer.tsx","hoc/withAuthRedirect.tsx","../node_modules/classnames/index.js"],"sourcesContent":["var _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgDefaultAvatar(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: \"800px\",\n    width: \"800px\",\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    viewBox: \"0 0 318.965 318.965\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#5C9EA0\"\n    },\n    d: \"M303.673,253.518c-11.151-37.754-67.121-33.566-91.279-44.408 c-24.157-10.842-20.386-47.219-23.449-53.548h-58.932c-3.058,6.329,0.714,42.711-23.449,53.548 c-24.157,10.842-80.133,6.655-91.279,44.408c-6.149,20.824-5.857,27.193-7.554,50.26c0,0,76.8,15.187,150.014,15.187 s153.488-15.187,153.488-15.187C309.53,280.705,309.822,274.342,303.673,253.518z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#44919B\"\n    },\n    d: \"M303.673,253.518c-11.151-37.754-67.121-33.566-91.279-44.408 c-24.157-10.842-20.386-47.219-23.449-53.548H157.74c0,0-0.719,51.024,23.438,61.866s80.133,6.655,91.279,44.408 c5.857,19.83,5.868,26.552,7.324,47.073c19.234-2.816,31.442-5.126,31.442-5.126C309.53,280.705,309.822,274.342,303.673,253.518z \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#44919B\"\n    },\n    d: \"M60.621,312.068c27.631,3.552,62.771,6.897,97.124,6.897c35.112,0,71.854-3.496,100.581-7.133 v-22.853c0,0-56.853,8.526-100.721,8.526s-96.978-8.526-96.978-8.526v23.089H60.621z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#EAE5DC\"\n    },\n    d: \"M190.092,226.382c9.741-3.805,17.756-9.409,23.168-16.21l0.416-0.517 c-0.433-0.18-0.86-0.36-1.276-0.545c-24.157-10.842-20.386-47.219-23.449-53.548h-58.938c-3.058,6.329,0.714,42.711-23.449,53.548 c-0.416,0.185-0.843,0.371-1.276,0.545l0.416,0.517c5.413,6.795,13.428,12.399,23.168,16.21c9.229,3.603,19.813,5.508,30.61,5.508 S180.863,229.984,190.092,226.382z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#E0DBD3\"\n    },\n    d: \"M212.395,209.109c-4.345-1.95-7.779-4.727-10.516-8.004l0,0 c-5.064,6.357-13.827,11.404-24.573,14.096c1.214,0.86,2.507,1.607,3.878,2.22c4.71,2.113,10.634,3.659,17.199,5.053 c6.031-3.378,11.089-7.548,14.872-12.304l0.416-0.517C213.238,209.48,212.811,209.295,212.395,209.109z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#DBB491\"\n    },\n    d: \"M201.878,201.106c-12.5-14.951-10.421-40.356-12.927-45.549h-58.938 c-2.512,5.193-0.427,30.599-12.927,45.549c7.655,9.611,23.764,16.232,42.396,16.232S194.223,210.717,201.878,201.106z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#CCA483\"\n    },\n    d: \"M177.305,215.202c10.747-2.692,19.509-7.74,24.573-14.096 c-12.5-14.951-10.421-40.356-12.927-45.549h-31.206C157.745,155.562,157.105,200.948,177.305,215.202z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#C69E7F\"\n    },\n    d: \"M122.083,193.158c9.78,7.959,21.24,15.85,37.338,18.132c16.137-2.288,27.569-10.342,37.36-18.334 c-8.144-14.973-5.626-32.83-7.83-37.4h-58.938C127.799,160.131,130.266,178.179,122.083,193.158z\"\n  }), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"ellipse\", {\n    transform: \"matrix(-0.177 0.9842 -0.9842 -0.177 385.6561 -85.3711)\",\n    style: {\n      fill: \"#CCA483\"\n    },\n    cx: 228.522,\n    cy: 118.558,\n    rx: 21.386,\n    ry: 11.629\n  }), /*#__PURE__*/React.createElement(\"ellipse\", {\n    transform: \"matrix(-0.9842 0.177 -0.177 -0.9842 200.0903 219.2807)\",\n    style: {\n      fill: \"#DBB491\"\n    },\n    cx: 90.265,\n    cy: 118.565,\n    rx: 11.629,\n    ry: 21.386\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#DBB491\"\n    },\n    d: \"M223.641,47.365H159.42H95.233c0,0-35.989,146.614,64.187,160.806 C259.636,193.979,223.641,47.365,223.641,47.365z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#CCA483\"\n    },\n    d: \"M159.42,208.171c100.216-14.192,64.221-160.806,64.221-160.806h-15.024 c4.114,61.242,9.808,93.774-13.815,129.24C176.085,204.708,159.42,208.171,159.42,208.171z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#CCA483\"\n    },\n    d: \"M192.666,55.234L90.309,83.365c8.661,3.468,25.574,9.864,61.748,9.707 c20.133-0.09,64.412-6.239,74.203-29.795L192.666,55.234z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#393C3D\"\n    },\n    d: \"M187.838,5.48c0,0-19.824-9.33-46.477-3.642c-19.953,4.26-52.423,17.829-59.73,46.893 c0,0-10.932,47.483,7.683,67.931c0,0-0.916-18.548,0.956-33.313c0,0,22.837,5.593,49.04,5.649 c27.856,0.056,64.997-4.519,86.951-25.72c0,0,3.294,20.167,3.294,53.385c0,0,5.93-9.111,7.189-21.207 c2.855-27.44-2.748-65.958-23.292-64.693C213.446,30.756,204.745,13.49,187.838,5.48z\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#3B3B3B\"\n    },\n    d: \"M232.826,100.879c-27.496-9.634-65.115,0.742-65.115,0.742c-3.586,0.882-5.986,1.051-7.228,1.062 c-0.006,0-1,0-1,0h-1c-1.242-0.011-3.642-0.18-7.234-1.062c0,0-37.619-10.37-65.115-0.742c0,0-0.821,3.867,0,9.139 c0,0,0.067,0.798,0.956,1.135c0,0,3.001,0.944,3.777,4.002c0,0,1.72,6.891,2.276,10.055c0,0,0.933,6.098,4.277,9.504 c0,0,2.917,3.732,10.393,5.39c0,0,9.724,2.501,21.836,1.057c0,0,8.65-1.062,13.096-5.238c0,0,4.907-4.204,7.627-12.337 c0,0,0.849-2.501,2.67-7.931c0,0,0.877-3.704,6.43-3.946c5.559,0.242,6.43,3.946,6.43,3.946c1.821,5.43,2.67,7.931,2.67,7.931 c2.72,8.139,7.627,12.337,7.627,12.337c4.446,4.176,13.096,5.238,13.096,5.238c12.112,1.444,21.836-1.057,21.836-1.057 c7.47-1.658,10.393-5.39,10.393-5.39c3.35-3.406,4.277-9.504,4.277-9.504c0.556-3.17,2.276-10.055,2.276-10.055 c0.776-3.058,3.777-4.002,3.777-4.002c0.888-0.332,0.955-1.135,0.955-1.135C233.646,104.746,232.826,100.879,232.826,100.879z  M148.376,115.818c0,0-3.209,14.507-8.6,18.458c0,0-5.216,4.3-15.423,4.474c0,0-15.204,0.663-22.016-4.412 c0,0-4.485-3.181-5.93-13.293c0,0-1.928-11.815,0.556-15.187c0,0,3.372-5.626,13.574-5.452c0,0,8.689-0.174,15.766,0.528 c0,0,8.774,0.674,16.57,3.198C142.868,104.122,151.355,106.471,148.376,115.818z M222.551,121.04 c-1.445,10.111-5.93,13.293-5.93,13.293c-6.812,5.081-22.016,4.412-22.016,4.412c-10.207-0.174-15.423-4.474-15.423-4.474 c-5.39-3.957-8.6-18.458-8.6-18.458c-2.979-9.347,5.503-11.696,5.503-11.696c7.796-2.524,16.57-3.198,16.57-3.198 c7.076-0.703,15.766-0.528,15.766-0.528c10.207-0.174,13.574,5.452,13.574,5.452C224.479,109.22,222.551,121.04,222.551,121.04z\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgDefaultAvatar);\nexport default __webpack_public_path__ + \"static/media/default-avatar.c1e948835e196f3d0cec1cb100fe13ab.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"selectedPage\":\"Paginator_selectedPage__-4FEt\",\"pageNumber\":\"Paginator_pageNumber__6RIH6\",\"countPage\":\"Paginator_countPage__qY09q\"};","import React, { useState } from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\";\r\n\r\nexport const Paginator = (props: any) => {\r\n  const { totalItemsCount, pageSize, onClickPageChanges, currentPage, portionSize = 10 } = props;\r\n\r\n  const pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n  const pages = [];\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i);\r\n  }\r\n\r\n  const portionCount = Math.ceil(pagesCount / portionSize);\r\n  const [portionNumber, setPortionNumber] = useState(1);\r\n  const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n  const rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n  return (\r\n    <div className={styles.countPage}>\r\n      { portionNumber > 1 &&\r\n      <button onClick={()=>{setPortionNumber(portionNumber - 1)}}>Назад</button>}\r\n        {\r\n          pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map(p => {\r\n              return <span className={\r\n                cn({\r\n                  [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n              key={p}\r\n              onClick={e => onClickPageChanges(p)}>{p}</span>\r\n            })\r\n      }\r\n      {portionCount > portionNumber &&\r\n        <button onClick={()=> setPortionNumber(portionNumber + 1)}>Вперед</button>}\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"userWrapper\":\"Users_userWrapper__G7On7\"};","import React from \"react\";\r\nimport styles from \"./Users.module.css\";\r\nimport { v1 } from \"uuid\";\r\nimport defaultAvatar from \"../../assets/images/default-avatar.svg\";\r\nimport { UserType } from \"../../redux/users-reducer\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const User = ({ user, followingProgress, unfollowUser, followUser }: UserPropsType) => {\r\n  return (\r\n    <div key={v1()} className={styles.userWrapper}>\r\n      <div>\r\n        <div>\r\n          <NavLink to={`/profile/${user.id}`}>\r\n            <img\r\n              src={user.photos.small !== null ? user.photos.small : defaultAvatar}\r\n              width={\"90px\"}\r\n              height={\"auto\"}\r\n              alt={\"user-avatar\"}\r\n            />\r\n          </NavLink>\r\n        </div>\r\n        <div>\r\n          {user.followed ? (\r\n            <button\r\n              disabled={followingProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                unfollowUser(user.id);\r\n              }}\r\n            >\r\n              Отписаться\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={followingProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                followUser(user.id);\r\n              }}\r\n            >\r\n              Подписаться\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <div>\r\n          <div>{user.name}</div>\r\n          <div>{user.status}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype UserPropsType = {\r\n  user: UserType;\r\n  followingProgress: Array<string>;\r\n  followUser: (userId: string) => void;\r\n  unfollowUser: (userId: string) => void;\r\n};\r\n","import React from \"react\";\nimport { UserType } from \"../../redux/users-reducer\";\nimport { Paginator } from \"../common/Paginator/Paginator\";\nimport { User } from \"./User\";\n\nexport const Users = ({\n  users,\n  currentPage,\n  pageSize,\n  totalUsersCount,\n  onClickPageChanges,\n  followingProgress,\n  followUser,\n  unfollowUser,\n}: UsersPropsType) => {\n  return (\n    <div>\n      <Paginator\n        currentPage={currentPage}\n        onClickPageChanges={onClickPageChanges}\n        totalItemsCount={totalUsersCount}\n        pageSize={pageSize}/>\n      {users.map((user) => (\n        <User\n          key={user.id}\n          user={user}\n          followingProgress={followingProgress}\n          followUser={followUser}\n          unfollowUser={unfollowUser}\n        />\n      ))}\n    </div>\n  );\n};\n\ntype UsersPropsType = {\n  users: Array<UserType>;\n  currentPage: number;\n  pageSize: number;\n  totalUsersCount: number;\n  onClickPageChanges: (number: number) => void;\n  followingProgress: Array<string>;\n  followUser: (userId: string) => void;\n  unfollowUser: (userId: string) => void;\n};\n","import { runIdentityFunctionCheck } from './devModeChecks/identityFunctionCheck'\nimport { runInputStabilityCheck } from './devModeChecks/inputStabilityCheck'\nimport { globalDevModeChecks } from './devModeChecks/setGlobalDevModeChecks'\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport type {\n  DevModeChecks,\n  Selector,\n  SelectorArray,\n  DevModeChecksExecutionInfo\n} from './types'\n\nexport const NOT_FOUND = 'NOT_FOUND'\nexport type NOT_FOUND_TYPE = typeof NOT_FOUND\n\n/**\n * Assert that the provided value is a function. If the assertion fails,\n * a `TypeError` is thrown with an optional custom error message.\n *\n * @param func - The value to be checked.\n * @param  errorMessage - An optional custom error message to use if the assertion fails.\n * @throws A `TypeError` if the assertion fails.\n */\nexport function assertIsFunction<FunctionType extends Function>(\n  func: unknown,\n  errorMessage = `expected a function, instead received ${typeof func}`\n): asserts func is FunctionType {\n  if (typeof func !== 'function') {\n    throw new TypeError(errorMessage)\n  }\n}\n\n/**\n * Assert that the provided value is an object. If the assertion fails,\n * a `TypeError` is thrown with an optional custom error message.\n *\n * @param object - The value to be checked.\n * @param  errorMessage - An optional custom error message to use if the assertion fails.\n * @throws A `TypeError` if the assertion fails.\n */\nexport function assertIsObject<ObjectType extends Record<string, unknown>>(\n  object: unknown,\n  errorMessage = `expected an object, instead received ${typeof object}`\n): asserts object is ObjectType {\n  if (typeof object !== 'object') {\n    throw new TypeError(errorMessage)\n  }\n}\n\n/**\n * Assert that the provided array is an array of functions. If the assertion fails,\n * a `TypeError` is thrown with an optional custom error message.\n *\n * @param array - The array to be checked.\n * @param  errorMessage - An optional custom error message to use if the assertion fails.\n * @throws A `TypeError` if the assertion fails.\n */\nexport function assertIsArrayOfFunctions<FunctionType extends Function>(\n  array: unknown[],\n  errorMessage = `expected all items to be functions, instead received the following types: `\n): asserts array is FunctionType[] {\n  if (\n    !array.every((item): item is FunctionType => typeof item === 'function')\n  ) {\n    const itemTypes = array\n      .map(item =>\n        typeof item === 'function'\n          ? `function ${item.name || 'unnamed'}()`\n          : typeof item\n      )\n      .join(', ')\n    throw new TypeError(`${errorMessage}[${itemTypes}]`)\n  }\n}\n\n/**\n * Ensure that the input is an array. If it's already an array, it's returned as is.\n * If it's not an array, it will be wrapped in a new array.\n *\n * @param item - The item to be checked.\n * @returns An array containing the input item. If the input is already an array, it's returned without modification.\n */\nexport const ensureIsArray = (item: unknown) => {\n  return Array.isArray(item) ? item : [item]\n}\n\n/**\n * Extracts the \"dependencies\" / \"input selectors\" from the arguments of `createSelector`.\n *\n * @param createSelectorArgs - Arguments passed to `createSelector` as an array.\n * @returns An array of \"input selectors\" / \"dependencies\".\n * @throws A `TypeError` if any of the input selectors is not function.\n */\nexport function getDependencies(createSelectorArgs: unknown[]) {\n  const dependencies = Array.isArray(createSelectorArgs[0])\n    ? createSelectorArgs[0]\n    : createSelectorArgs\n\n  assertIsArrayOfFunctions<Selector>(\n    dependencies,\n    `createSelector expects all input-selectors to be functions, but received the following types: `\n  )\n\n  return dependencies as SelectorArray\n}\n\n/**\n * Runs each input selector and returns their collective results as an array.\n *\n * @param dependencies - An array of \"dependencies\" or \"input selectors\".\n * @param inputSelectorArgs - An array of arguments being passed to the input selectors.\n * @returns An array of input selector results.\n */\nexport function collectInputSelectorResults(\n  dependencies: SelectorArray,\n  inputSelectorArgs: unknown[] | IArguments\n) {\n  const inputSelectorResults = []\n  const { length } = dependencies\n  for (let i = 0; i < length; i++) {\n    // @ts-ignore\n    // apply arguments instead of spreading and mutate a local list of params for performance.\n    inputSelectorResults.push(dependencies[i].apply(null, inputSelectorArgs))\n  }\n  return inputSelectorResults\n}\n\n/**\n * Retrieves execution information for development mode checks.\n *\n * @param devModeChecks - Custom Settings for development mode checks. These settings will override the global defaults.\n * @param firstRun - Indicates whether it is the first time the selector has run.\n * @returns  An object containing the execution information for each development mode check.\n */\nexport const getDevModeChecksExecutionInfo = (\n  firstRun: boolean,\n  devModeChecks: Partial<DevModeChecks>\n) => {\n  const { identityFunctionCheck, inputStabilityCheck } = {\n    ...globalDevModeChecks,\n    ...devModeChecks\n  }\n  return {\n    identityFunctionCheck: {\n      shouldRun:\n        identityFunctionCheck === 'always' ||\n        (identityFunctionCheck === 'once' && firstRun),\n      run: runIdentityFunctionCheck\n    },\n    inputStabilityCheck: {\n      shouldRun:\n        inputStabilityCheck === 'always' ||\n        (inputStabilityCheck === 'once' && firstRun),\n      run: runInputStabilityCheck\n    }\n  } satisfies DevModeChecksExecutionInfo\n}\n","// Original source:\n// - https://github.com/simonihmig/tracked-redux/blob/master/packages/tracked-redux/src/-private/proxy.ts\n\nimport type { Node, Tag } from './tracking'\nimport {\n  consumeCollection,\n  consumeTag,\n  createTag,\n  dirtyCollection,\n  dirtyTag\n} from './tracking'\n\nexport const REDUX_PROXY_LABEL = Symbol()\n\nlet nextId = 0\n\nconst proto = Object.getPrototypeOf({})\n\nclass ObjectTreeNode<T extends Record<string, unknown>> implements Node<T> {\n  proxy: T = new Proxy(this, objectProxyHandler) as unknown as T\n  tag = createTag()\n  tags = {} as Record<string, Tag>\n  children = {} as Record<string, Node>\n  collectionTag = null\n  id = nextId++\n\n  constructor(public value: T) {\n    this.value = value\n    this.tag.value = value\n  }\n}\n\nconst objectProxyHandler = {\n  get(node: Node, key: string | symbol): unknown {\n    function calculateResult() {\n      const { value } = node\n\n      const childValue = Reflect.get(value, key)\n\n      if (typeof key === 'symbol') {\n        return childValue\n      }\n\n      if (key in proto) {\n        return childValue\n      }\n\n      if (typeof childValue === 'object' && childValue !== null) {\n        let childNode = node.children[key]\n\n        if (childNode === undefined) {\n          childNode = node.children[key] = createNode(childValue)\n        }\n\n        if (childNode.tag) {\n          consumeTag(childNode.tag)\n        }\n\n        return childNode.proxy\n      } else {\n        let tag = node.tags[key]\n\n        if (tag === undefined) {\n          tag = node.tags[key] = createTag()\n          tag.value = childValue\n        }\n\n        consumeTag(tag)\n\n        return childValue\n      }\n    }\n    const res = calculateResult()\n    return res\n  },\n\n  ownKeys(node: Node): ArrayLike<string | symbol> {\n    consumeCollection(node)\n    return Reflect.ownKeys(node.value)\n  },\n\n  getOwnPropertyDescriptor(\n    node: Node,\n    prop: string | symbol\n  ): PropertyDescriptor | undefined {\n    return Reflect.getOwnPropertyDescriptor(node.value, prop)\n  },\n\n  has(node: Node, prop: string | symbol): boolean {\n    return Reflect.has(node.value, prop)\n  }\n}\n\nclass ArrayTreeNode<T extends Array<unknown>> implements Node<T> {\n  proxy: T = new Proxy([this], arrayProxyHandler) as unknown as T\n  tag = createTag()\n  tags = {}\n  children = {}\n  collectionTag = null\n  id = nextId++\n\n  constructor(public value: T) {\n    this.value = value\n    this.tag.value = value\n  }\n}\n\nconst arrayProxyHandler = {\n  get([node]: [Node], key: string | symbol): unknown {\n    if (key === 'length') {\n      consumeCollection(node)\n    }\n\n    return objectProxyHandler.get(node, key)\n  },\n\n  ownKeys([node]: [Node]): ArrayLike<string | symbol> {\n    return objectProxyHandler.ownKeys(node)\n  },\n\n  getOwnPropertyDescriptor(\n    [node]: [Node],\n    prop: string | symbol\n  ): PropertyDescriptor | undefined {\n    return objectProxyHandler.getOwnPropertyDescriptor(node, prop)\n  },\n\n  has([node]: [Node], prop: string | symbol): boolean {\n    return objectProxyHandler.has(node, prop)\n  }\n}\n\nexport function createNode<T extends Array<unknown> | Record<string, unknown>>(\n  value: T\n): Node<T> {\n  if (Array.isArray(value)) {\n    return new ArrayTreeNode(value)\n  }\n\n  return new ObjectTreeNode(value) as Node<T>\n}\n\nconst keysMap = new WeakMap<\n  Array<unknown> | Record<string, unknown>,\n  Set<string>\n>()\n\nexport function updateNode<T extends Array<unknown> | Record<string, unknown>>(\n  node: Node<T>,\n  newValue: T\n): void {\n  const { value, tags, children } = node\n\n  node.value = newValue\n\n  if (\n    Array.isArray(value) &&\n    Array.isArray(newValue) &&\n    value.length !== newValue.length\n  ) {\n    dirtyCollection(node)\n  } else {\n    if (value !== newValue) {\n      let oldKeysSize = 0\n      let newKeysSize = 0\n      let anyKeysAdded = false\n\n      for (const _key in value) {\n        oldKeysSize++\n      }\n\n      for (const key in newValue) {\n        newKeysSize++\n        if (!(key in value)) {\n          anyKeysAdded = true\n          break\n        }\n      }\n\n      const isDifferent = anyKeysAdded || oldKeysSize !== newKeysSize\n\n      if (isDifferent) {\n        dirtyCollection(node)\n      }\n    }\n  }\n\n  for (const key in tags) {\n    const childValue = (value as Record<string, unknown>)[key]\n    const newChildValue = (newValue as Record<string, unknown>)[key]\n\n    if (childValue !== newChildValue) {\n      dirtyCollection(node)\n      dirtyTag(tags[key], newChildValue)\n    }\n\n    if (typeof newChildValue === 'object' && newChildValue !== null) {\n      delete tags[key]\n    }\n  }\n\n  for (const key in children) {\n    const childNode = children[key]\n    const newChildValue = (newValue as Record<string, unknown>)[key]\n\n    const childValue = childNode.value\n\n    if (childValue === newChildValue) {\n      continue\n    } else if (typeof newChildValue === 'object' && newChildValue !== null) {\n      updateNode(childNode, newChildValue as Record<string, unknown>)\n    } else {\n      deleteNode(childNode)\n      delete children[key]\n    }\n  }\n}\n\nfunction deleteNode(node: Node): void {\n  if (node.tag) {\n    dirtyTag(node.tag, null)\n  }\n  dirtyCollection(node)\n  for (const key in node.tags) {\n    dirtyTag(node.tags[key], null)\n  }\n  for (const key in node.children) {\n    deleteNode(node.children[key])\n  }\n}\n","// Original source:\n// - https://github.com/facebook/react/blob/0b974418c9a56f6c560298560265dcf4b65784bc/packages/react/src/ReactCache.js\n\nimport type {\n  AnyFunction,\n  DefaultMemoizeFields,\n  EqualityFn,\n  Simplify\n} from './types'\n\nclass StrongRef<T> {\n  constructor(private value: T) {}\n  deref() {\n    return this.value\n  }\n}\n\nconst Ref =\n  typeof WeakRef !== 'undefined'\n    ? WeakRef\n    : (StrongRef as unknown as typeof WeakRef)\n\nconst UNTERMINATED = 0\nconst TERMINATED = 1\n\ninterface UnterminatedCacheNode<T> {\n  /**\n   * Status, represents whether the cached computation returned a value or threw an error.\n   */\n  s: 0\n  /**\n   * Value, either the cached result or an error, depending on status.\n   */\n  v: void\n  /**\n   * Object cache, a `WeakMap` where non-primitive arguments are stored.\n   */\n  o: null | WeakMap<Function | Object, CacheNode<T>>\n  /**\n   * Primitive cache, a regular Map where primitive arguments are stored.\n   */\n  p: null | Map<string | number | null | void | symbol | boolean, CacheNode<T>>\n}\n\ninterface TerminatedCacheNode<T> {\n  /**\n   * Status, represents whether the cached computation returned a value or threw an error.\n   */\n  s: 1\n  /**\n   * Value, either the cached result or an error, depending on status.\n   */\n  v: T\n  /**\n   * Object cache, a `WeakMap` where non-primitive arguments are stored.\n   */\n  o: null | WeakMap<Function | Object, CacheNode<T>>\n  /**\n   * Primitive cache, a regular `Map` where primitive arguments are stored.\n   */\n  p: null | Map<string | number | null | void | symbol | boolean, CacheNode<T>>\n}\n\ntype CacheNode<T> = TerminatedCacheNode<T> | UnterminatedCacheNode<T>\n\nfunction createCacheNode<T>(): CacheNode<T> {\n  return {\n    s: UNTERMINATED,\n    v: undefined,\n    o: null,\n    p: null\n  }\n}\n\n/**\n * Configuration options for a memoization function utilizing `WeakMap` for\n * its caching mechanism.\n *\n * @template Result - The type of the return value of the memoized function.\n *\n * @since 5.0.0\n * @public\n */\nexport interface WeakMapMemoizeOptions<Result = any> {\n  /**\n   * If provided, used to compare a newly generated output value against previous values in the cache.\n   * If a match is found, the old value is returned. This addresses the common\n   * ```ts\n   * todos.map(todo => todo.id)\n   * ```\n   * use case, where an update to another field in the original data causes a recalculation\n   * due to changed references, but the output is still effectively the same.\n   *\n   * @since 5.0.0\n   */\n  resultEqualityCheck?: EqualityFn<Result>\n}\n\n/**\n * Creates a tree of `WeakMap`-based cache nodes based on the identity of the\n * arguments it's been called with (in this case, the extracted values from your input selectors).\n * This allows `weakMapMemoize` to have an effectively infinite cache size.\n * Cache results will be kept in memory as long as references to the arguments still exist,\n * and then cleared out as the arguments are garbage-collected.\n *\n * __Design Tradeoffs for `weakMapMemoize`:__\n * - Pros:\n *   - It has an effectively infinite cache size, but you have no control over\n *   how long values are kept in cache as it's based on garbage collection and `WeakMap`s.\n * - Cons:\n *   - There's currently no way to alter the argument comparisons.\n *   They're based on strict reference equality.\n *   - It's roughly the same speed as `lruMemoize`, although likely a fraction slower.\n *\n * __Use Cases for `weakMapMemoize`:__\n * - This memoizer is likely best used for cases where you need to call the\n * same selector instance with many different arguments, such as a single\n * selector instance that is used in a list item component and called with\n * item IDs like:\n *   ```ts\n *   useSelector(state => selectSomeData(state, props.category))\n *   ```\n * @param func - The function to be memoized.\n * @returns A memoized function with a `.clearCache()` method attached.\n *\n * @example\n * <caption>Using `createSelector`</caption>\n * ```ts\n * import { createSelector, weakMapMemoize } from 'reselect'\n *\n * interface RootState {\n *   items: { id: number; category: string; name: string }[]\n * }\n *\n * const selectItemsByCategory = createSelector(\n *   [\n *     (state: RootState) => state.items,\n *     (state: RootState, category: string) => category\n *   ],\n *   (items, category) => items.filter(item => item.category === category),\n *   {\n *     memoize: weakMapMemoize,\n *     argsMemoize: weakMapMemoize\n *   }\n * )\n * ```\n *\n * @example\n * <caption>Using `createSelectorCreator`</caption>\n * ```ts\n * import { createSelectorCreator, weakMapMemoize } from 'reselect'\n *\n * const createSelectorWeakMap = createSelectorCreator({ memoize: weakMapMemoize, argsMemoize: weakMapMemoize })\n *\n * const selectItemsByCategory = createSelectorWeakMap(\n *   [\n *     (state: RootState) => state.items,\n *     (state: RootState, category: string) => category\n *   ],\n *   (items, category) => items.filter(item => item.category === category)\n * )\n * ```\n *\n * @template Func - The type of the function that is memoized.\n *\n * @see {@link https://reselect.js.org/api/weakMapMemoize `weakMapMemoize`}\n *\n * @since 5.0.0\n * @public\n * @experimental\n */\nexport function weakMapMemoize<Func extends AnyFunction>(\n  func: Func,\n  options: WeakMapMemoizeOptions<ReturnType<Func>> = {}\n) {\n  let fnNode = createCacheNode()\n  const { resultEqualityCheck } = options\n\n  let lastResult: WeakRef<object> | undefined\n\n  let resultsCount = 0\n\n  function memoized() {\n    let cacheNode = fnNode\n    const { length } = arguments\n    for (let i = 0, l = length; i < l; i++) {\n      const arg = arguments[i]\n      if (\n        typeof arg === 'function' ||\n        (typeof arg === 'object' && arg !== null)\n      ) {\n        // Objects go into a WeakMap\n        let objectCache = cacheNode.o\n        if (objectCache === null) {\n          cacheNode.o = objectCache = new WeakMap()\n        }\n        const objectNode = objectCache.get(arg)\n        if (objectNode === undefined) {\n          cacheNode = createCacheNode()\n          objectCache.set(arg, cacheNode)\n        } else {\n          cacheNode = objectNode\n        }\n      } else {\n        // Primitives go into a regular Map\n        let primitiveCache = cacheNode.p\n        if (primitiveCache === null) {\n          cacheNode.p = primitiveCache = new Map()\n        }\n        const primitiveNode = primitiveCache.get(arg)\n        if (primitiveNode === undefined) {\n          cacheNode = createCacheNode()\n          primitiveCache.set(arg, cacheNode)\n        } else {\n          cacheNode = primitiveNode\n        }\n      }\n    }\n\n    const terminatedNode = cacheNode as unknown as TerminatedCacheNode<any>\n\n    let result\n\n    if (cacheNode.s === TERMINATED) {\n      result = cacheNode.v\n    } else {\n      // Allow errors to propagate\n      result = func.apply(null, arguments as unknown as any[])\n      resultsCount++\n    }\n\n    terminatedNode.s = TERMINATED\n\n    if (resultEqualityCheck) {\n      const lastResultValue = lastResult?.deref?.() ?? lastResult\n      if (\n        lastResultValue != null &&\n        resultEqualityCheck(lastResultValue as ReturnType<Func>, result)\n      ) {\n        result = lastResultValue\n        resultsCount !== 0 && resultsCount--\n      }\n\n      const needsWeakRef =\n        (typeof result === 'object' && result !== null) ||\n        typeof result === 'function'\n      lastResult = needsWeakRef ? new Ref(result) : result\n    }\n    terminatedNode.v = result\n    return result\n  }\n\n  memoized.clearCache = () => {\n    fnNode = createCacheNode()\n    memoized.resetResultsCount()\n  }\n\n  memoized.resultsCount = () => resultsCount\n\n  memoized.resetResultsCount = () => {\n    resultsCount = 0\n  }\n\n  return memoized as Func & Simplify<DefaultMemoizeFields>\n}\n","import { weakMapMemoize } from './weakMapMemoize'\n\nimport type {\n  Combiner,\n  CreateSelectorOptions,\n  DropFirstParameter,\n  ExtractMemoizerFields,\n  GetParamsFromSelectors,\n  GetStateFromSelectors,\n  InterruptRecursion,\n  OutputSelector,\n  Selector,\n  SelectorArray,\n  SetRequired,\n  Simplify,\n  UnknownMemoizer\n} from './types'\n\nimport {\n  assertIsFunction,\n  collectInputSelectorResults,\n  ensureIsArray,\n  getDependencies,\n  getDevModeChecksExecutionInfo\n} from './utils'\n\n/**\n * An instance of `createSelector`, customized with a given memoize implementation.\n *\n * @template MemoizeFunction - The type of the memoize function that is used to memoize the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`).\n * @template ArgsMemoizeFunction - The type of the optional memoize function that is used to memoize the arguments passed into the output selector generated by `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`). If none is explicitly provided, `weakMapMemoize` will be used.\n * @template StateType - The type of state that the selectors created with this selector creator will operate on.\n *\n * @public\n */\nexport interface CreateSelectorFunction<\n  MemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize,\n  ArgsMemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize,\n  StateType = any\n> {\n  /**\n   * Creates a memoized selector function.\n   *\n   * @param createSelectorArgs - An arbitrary number of input selectors as separate inline arguments and a `combiner` function.\n   * @returns A memoized output selector.\n   *\n   * @template InputSelectors - The type of the input selectors as an array.\n   * @template Result - The return type of the `combiner` as well as the output selector.\n   * @template OverrideMemoizeFunction - The type of the optional `memoize` function that could be passed into the options object to override the original `memoize` function that was initially passed into `createSelectorCreator`.\n   * @template OverrideArgsMemoizeFunction - The type of the optional `argsMemoize` function that could be passed into the options object to override the original `argsMemoize` function that was initially passed into `createSelectorCreator`.\n   *\n   * @see {@link https://reselect.js.org/api/createselector `createSelector`}\n   */\n  <InputSelectors extends SelectorArray<StateType>, Result>(\n    ...createSelectorArgs: [\n      ...inputSelectors: InputSelectors,\n      combiner: Combiner<InputSelectors, Result>\n    ]\n  ): OutputSelector<\n    InputSelectors,\n    Result,\n    MemoizeFunction,\n    ArgsMemoizeFunction\n  > &\n    InterruptRecursion\n\n  /**\n   * Creates a memoized selector function.\n   *\n   * @param createSelectorArgs - An arbitrary number of input selectors as separate inline arguments, a `combiner` function and an `options` object.\n   * @returns A memoized output selector.\n   *\n   * @template InputSelectors - The type of the input selectors as an array.\n   * @template Result - The return type of the `combiner` as well as the output selector.\n   * @template OverrideMemoizeFunction - The type of the optional `memoize` function that could be passed into the options object to override the original `memoize` function that was initially passed into `createSelectorCreator`.\n   * @template OverrideArgsMemoizeFunction - The type of the optional `argsMemoize` function that could be passed into the options object to override the original `argsMemoize` function that was initially passed into `createSelectorCreator`.\n   *\n   * @see {@link https://reselect.js.org/api/createselector `createSelector`}\n   */\n  <\n    InputSelectors extends SelectorArray<StateType>,\n    Result,\n    OverrideMemoizeFunction extends UnknownMemoizer = MemoizeFunction,\n    OverrideArgsMemoizeFunction extends UnknownMemoizer = ArgsMemoizeFunction\n  >(\n    ...createSelectorArgs: [\n      ...inputSelectors: InputSelectors,\n      combiner: Combiner<InputSelectors, Result>,\n      createSelectorOptions: Simplify<\n        CreateSelectorOptions<\n          MemoizeFunction,\n          ArgsMemoizeFunction,\n          OverrideMemoizeFunction,\n          OverrideArgsMemoizeFunction\n        >\n      >\n    ]\n  ): OutputSelector<\n    InputSelectors,\n    Result,\n    OverrideMemoizeFunction,\n    OverrideArgsMemoizeFunction\n  > &\n    InterruptRecursion\n\n  /**\n   * Creates a memoized selector function.\n   *\n   * @param inputSelectors - An array of input selectors.\n   * @param combiner - A function that Combines the input selectors and returns an output selector. Otherwise known as the result function.\n   * @param createSelectorOptions - An optional options object that allows for further customization per selector.\n   * @returns A memoized output selector.\n   *\n   * @template InputSelectors - The type of the input selectors array.\n   * @template Result - The return type of the `combiner` as well as the output selector.\n   * @template OverrideMemoizeFunction - The type of the optional `memoize` function that could be passed into the options object to override the original `memoize` function that was initially passed into `createSelectorCreator`.\n   * @template OverrideArgsMemoizeFunction - The type of the optional `argsMemoize` function that could be passed into the options object to override the original `argsMemoize` function that was initially passed into `createSelectorCreator`.\n   *\n   * @see {@link https://reselect.js.org/api/createselector `createSelector`}\n   */\n  <\n    InputSelectors extends SelectorArray<StateType>,\n    Result,\n    OverrideMemoizeFunction extends UnknownMemoizer = MemoizeFunction,\n    OverrideArgsMemoizeFunction extends UnknownMemoizer = ArgsMemoizeFunction\n  >(\n    inputSelectors: [...InputSelectors],\n    combiner: Combiner<InputSelectors, Result>,\n    createSelectorOptions?: Simplify<\n      CreateSelectorOptions<\n        MemoizeFunction,\n        ArgsMemoizeFunction,\n        OverrideMemoizeFunction,\n        OverrideArgsMemoizeFunction\n      >\n    >\n  ): OutputSelector<\n    InputSelectors,\n    Result,\n    OverrideMemoizeFunction,\n    OverrideArgsMemoizeFunction\n  > &\n    InterruptRecursion\n\n  /**\n   * Creates a \"pre-typed\" version of {@linkcode createSelector createSelector}\n   * where the `state` type is predefined.\n   *\n   * This allows you to set the `state` type once, eliminating the need to\n   * specify it with every {@linkcode createSelector createSelector} call.\n   *\n   * @returns A pre-typed `createSelector` with the state type already defined.\n   *\n   * @example\n   * ```ts\n   * import { createSelector } from 'reselect'\n   *\n   * export interface RootState {\n   *   todos: { id: number; completed: boolean }[]\n   *   alerts: { id: number; read: boolean }[]\n   * }\n   *\n   * export const createAppSelector = createSelector.withTypes<RootState>()\n   *\n   * const selectTodoIds = createAppSelector(\n   *   [\n   *     // Type of `state` is set to `RootState`, no need to manually set the type\n   *     state => state.todos\n   *   ],\n   *   todos => todos.map(({ id }) => id)\n   * )\n   * ```\n   * @template OverrideStateType - The specific type of state used by all selectors created with this selector creator.\n   *\n   * @see {@link https://reselect.js.org/api/createselector#defining-a-pre-typed-createselector `createSelector.withTypes`}\n   *\n   * @since 5.1.0\n   */\n  withTypes: <OverrideStateType extends StateType>() => CreateSelectorFunction<\n    MemoizeFunction,\n    ArgsMemoizeFunction,\n    OverrideStateType\n  >\n}\n\n/**\n * Creates a selector creator function with the specified memoization function\n * and options for customizing memoization behavior.\n *\n * @param options - An options object containing the `memoize` function responsible for memoizing the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`). It also provides additional options for customizing memoization. While the `memoize` property is mandatory, the rest are optional.\n * @returns A customized `createSelector` function.\n *\n * @example\n * ```ts\n * const customCreateSelector = createSelectorCreator({\n *   memoize: customMemoize, // Function to be used to memoize `resultFunc`\n *   memoizeOptions: [memoizeOption1, memoizeOption2], // Options passed to `customMemoize` as the second argument onwards\n *   argsMemoize: customArgsMemoize, // Function to be used to memoize the selector's arguments\n *   argsMemoizeOptions: [argsMemoizeOption1, argsMemoizeOption2] // Options passed to `customArgsMemoize` as the second argument onwards\n * })\n *\n * const customSelector = customCreateSelector(\n *   [inputSelector1, inputSelector2],\n *   resultFunc // `resultFunc` will be passed as the first argument to `customMemoize`\n * )\n *\n * customSelector(\n *   ...selectorArgs // Will be memoized by `customArgsMemoize`\n * )\n * ```\n *\n * @template MemoizeFunction - The type of the memoize function that is used to memoize the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`).\n * @template ArgsMemoizeFunction - The type of the optional memoize function that is used to memoize the arguments passed into the output selector generated by `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`). If none is explicitly provided, `weakMapMemoize` will be used.\n *\n * @see {@link https://reselect.js.org/api/createSelectorCreator#using-options-since-500 `createSelectorCreator`}\n *\n * @since 5.0.0\n * @public\n */\nexport function createSelectorCreator<\n  MemoizeFunction extends UnknownMemoizer,\n  ArgsMemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize\n>(\n  options: Simplify<\n    SetRequired<\n      CreateSelectorOptions<\n        typeof weakMapMemoize,\n        typeof weakMapMemoize,\n        MemoizeFunction,\n        ArgsMemoizeFunction\n      >,\n      'memoize'\n    >\n  >\n): CreateSelectorFunction<MemoizeFunction, ArgsMemoizeFunction>\n\n/**\n * Creates a selector creator function with the specified memoization function\n * and options for customizing memoization behavior.\n *\n * @param memoize - The `memoize` function responsible for memoizing the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`).\n * @param memoizeOptionsFromArgs - Optional configuration options for the memoization function. These options are then passed to the memoize function as the second argument onwards.\n * @returns A customized `createSelector` function.\n *\n * @example\n * ```ts\n * const customCreateSelector = createSelectorCreator(customMemoize, // Function to be used to memoize `resultFunc`\n *   option1, // Will be passed as second argument to `customMemoize`\n *   option2, // Will be passed as third argument to `customMemoize`\n *   option3 // Will be passed as fourth argument to `customMemoize`\n * )\n *\n * const customSelector = customCreateSelector(\n *   [inputSelector1, inputSelector2],\n *   resultFunc // `resultFunc` will be passed as the first argument to `customMemoize`\n * )\n * ```\n *\n * @template MemoizeFunction - The type of the memoize function that is used to memoize the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`).\n *\n * @see {@link https://reselect.js.org/api/createSelectorCreator#using-memoize-and-memoizeoptions `createSelectorCreator`}\n *\n * @public\n */\nexport function createSelectorCreator<MemoizeFunction extends UnknownMemoizer>(\n  memoize: MemoizeFunction,\n  ...memoizeOptionsFromArgs: DropFirstParameter<MemoizeFunction>\n): CreateSelectorFunction<MemoizeFunction>\n\n/**\n * Creates a selector creator function with the specified memoization\n * function and options for customizing memoization behavior.\n *\n * @param memoizeOrOptions - Either A `memoize` function or an `options` object containing the `memoize` function.\n * @param memoizeOptionsFromArgs - Optional configuration options for the memoization function. These options are then passed to the memoize function as the second argument onwards.\n * @returns A customized `createSelector` function.\n *\n * @template MemoizeFunction - The type of the memoize function that is used to memoize the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`).\n * @template ArgsMemoizeFunction - The type of the optional memoize function that is used to memoize the arguments passed into the output selector generated by `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`). If none is explicitly provided, `weakMapMemoize` will be used.\n * @template MemoizeOrOptions - The type of the first argument. It can either be a `memoize` function or an `options` object containing the `memoize` function.\n */\nexport function createSelectorCreator<\n  MemoizeFunction extends UnknownMemoizer,\n  ArgsMemoizeFunction extends UnknownMemoizer,\n  MemoizeOrOptions extends\n    | MemoizeFunction\n    | SetRequired<\n        CreateSelectorOptions<MemoizeFunction, ArgsMemoizeFunction>,\n        'memoize'\n      >\n>(\n  memoizeOrOptions: MemoizeOrOptions,\n  ...memoizeOptionsFromArgs: MemoizeOrOptions extends SetRequired<\n    CreateSelectorOptions<MemoizeFunction, ArgsMemoizeFunction>,\n    'memoize'\n  >\n    ? never\n    : DropFirstParameter<MemoizeFunction>\n) {\n  /** options initially passed into `createSelectorCreator`. */\n  const createSelectorCreatorOptions: SetRequired<\n    CreateSelectorOptions<MemoizeFunction, ArgsMemoizeFunction>,\n    'memoize'\n  > = typeof memoizeOrOptions === 'function'\n    ? {\n        memoize: memoizeOrOptions as MemoizeFunction,\n        memoizeOptions: memoizeOptionsFromArgs\n      }\n    : memoizeOrOptions\n\n  const createSelector = <\n    InputSelectors extends SelectorArray,\n    Result,\n    OverrideMemoizeFunction extends UnknownMemoizer = MemoizeFunction,\n    OverrideArgsMemoizeFunction extends UnknownMemoizer = ArgsMemoizeFunction\n  >(\n    ...createSelectorArgs: [\n      ...inputSelectors: [...InputSelectors],\n      combiner: Combiner<InputSelectors, Result>,\n      createSelectorOptions?: CreateSelectorOptions<\n        MemoizeFunction,\n        ArgsMemoizeFunction,\n        OverrideMemoizeFunction,\n        OverrideArgsMemoizeFunction\n      >\n    ]\n  ) => {\n    let recomputations = 0\n    let dependencyRecomputations = 0\n    let lastResult: Result\n\n    // Due to the intricacies of rest params, we can't do an optional arg after `...createSelectorArgs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n    let directlyPassedOptions: CreateSelectorOptions<\n      MemoizeFunction,\n      ArgsMemoizeFunction,\n      OverrideMemoizeFunction,\n      OverrideArgsMemoizeFunction\n    > = {}\n\n    // Normally, the result func or \"combiner\" is the last arg\n    let resultFunc = createSelectorArgs.pop() as\n      | Combiner<InputSelectors, Result>\n      | CreateSelectorOptions<\n          MemoizeFunction,\n          ArgsMemoizeFunction,\n          OverrideMemoizeFunction,\n          OverrideArgsMemoizeFunction\n        >\n\n    // If the result func is actually an _object_, assume it's our options object\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc\n      // and pop the real result func off\n      resultFunc = createSelectorArgs.pop() as Combiner<InputSelectors, Result>\n    }\n\n    assertIsFunction(\n      resultFunc,\n      `createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`\n    )\n\n    // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to `createSelectorCreator`.\n    const combinedOptions = {\n      ...createSelectorCreatorOptions,\n      ...directlyPassedOptions\n    }\n\n    const {\n      memoize,\n      memoizeOptions = [],\n      argsMemoize = weakMapMemoize,\n      argsMemoizeOptions = [],\n      devModeChecks = {}\n    } = combinedOptions\n\n    // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n    const finalMemoizeOptions = ensureIsArray(memoizeOptions)\n    const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions)\n    const dependencies = getDependencies(createSelectorArgs) as InputSelectors\n\n    const memoizedResultFunc = memoize(function recomputationWrapper() {\n      recomputations++\n      // apply arguments instead of spreading for performance.\n      // @ts-ignore\n      return (resultFunc as Combiner<InputSelectors, Result>).apply(\n        null,\n        arguments\n      )\n    }, ...finalMemoizeOptions) as Combiner<InputSelectors, Result> &\n      ExtractMemoizerFields<OverrideMemoizeFunction>\n\n    let firstRun = true\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    const selector = argsMemoize(function dependenciesChecker() {\n      dependencyRecomputations++\n      /** Return values of input selectors which the `resultFunc` takes as arguments. */\n      const inputSelectorResults = collectInputSelectorResults(\n        dependencies,\n        arguments\n      )\n\n      // apply arguments instead of spreading for performance.\n      // @ts-ignore\n      lastResult = memoizedResultFunc.apply(null, inputSelectorResults)\n\n      if (process.env.NODE_ENV !== 'production') {\n        const { identityFunctionCheck, inputStabilityCheck } =\n          getDevModeChecksExecutionInfo(firstRun, devModeChecks)\n        if (identityFunctionCheck.shouldRun) {\n          identityFunctionCheck.run(\n            resultFunc as Combiner<InputSelectors, Result>,\n            inputSelectorResults,\n            lastResult\n          )\n        }\n\n        if (inputStabilityCheck.shouldRun) {\n          // make a second copy of the params, to check if we got the same results\n          const inputSelectorResultsCopy = collectInputSelectorResults(\n            dependencies,\n            arguments\n          )\n\n          inputStabilityCheck.run(\n            { inputSelectorResults, inputSelectorResultsCopy },\n            { memoize, memoizeOptions: finalMemoizeOptions },\n            arguments\n          )\n        }\n\n        if (firstRun) firstRun = false\n      }\n\n      return lastResult\n    }, ...finalArgsMemoizeOptions) as unknown as Selector<\n      GetStateFromSelectors<InputSelectors>,\n      Result,\n      GetParamsFromSelectors<InputSelectors>\n    > &\n      ExtractMemoizerFields<OverrideArgsMemoizeFunction>\n\n    return Object.assign(selector, {\n      resultFunc,\n      memoizedResultFunc,\n      dependencies,\n      dependencyRecomputations: () => dependencyRecomputations,\n      resetDependencyRecomputations: () => {\n        dependencyRecomputations = 0\n      },\n      lastResult: () => lastResult,\n      recomputations: () => recomputations,\n      resetRecomputations: () => {\n        recomputations = 0\n      },\n      memoize,\n      argsMemoize\n    }) as OutputSelector<\n      InputSelectors,\n      Result,\n      OverrideMemoizeFunction,\n      OverrideArgsMemoizeFunction\n    >\n  }\n\n  Object.assign(createSelector, {\n    withTypes: () => createSelector\n  })\n\n  return createSelector as CreateSelectorFunction<\n    MemoizeFunction,\n    ArgsMemoizeFunction\n  >\n}\n\n/**\n * Accepts one or more \"input selectors\" (either as separate arguments or a single array),\n * a single \"result function\" / \"combiner\", and an optional options object, and\n * generates a memoized selector function.\n *\n * @see {@link https://reselect.js.org/api/createSelector `createSelector`}\n *\n * @public\n */\nexport const createSelector =\n  /* #__PURE__ */ createSelectorCreator(weakMapMemoize)\n","import { createSelector } from './createSelectorCreator'\n\nimport type { CreateSelectorFunction } from './createSelectorCreator'\nimport type {\n  InterruptRecursion,\n  ObjectValuesToTuple,\n  OutputSelector,\n  Selector,\n  Simplify,\n  UnknownMemoizer\n} from './types'\nimport { assertIsObject } from './utils'\nimport type { weakMapMemoize } from './weakMapMemoize'\n\n/**\n * Represents a mapping of selectors to their return types.\n *\n * @template TObject - An object type where each property is a selector function.\n *\n * @public\n */\nexport type SelectorResultsMap<TObject extends SelectorsObject> = {\n  [Key in keyof TObject]: ReturnType<TObject[Key]>\n}\n\n/**\n * Represents a mapping of selectors for each key in a given root state.\n *\n * This type is a utility that takes a root state object type and\n * generates a corresponding set of selectors. Each selector is associated\n * with a key in the root state, allowing for the selection\n * of specific parts of the state.\n *\n * @template RootState - The type of the root state object.\n *\n * @since 5.0.0\n * @public\n */\nexport type RootStateSelectors<RootState = any> = {\n  [Key in keyof RootState]: Selector<RootState, RootState[Key], []>\n}\n\n/**\n * @deprecated Please use {@linkcode StructuredSelectorCreator.withTypes createStructuredSelector.withTypes<RootState>()} instead. This type will be removed in the future.\n * @template RootState - The type of the root state object.\n *\n * @since 5.0.0\n * @public\n */\nexport type TypedStructuredSelectorCreator<RootState = any> =\n  /**\n   * A convenience function that simplifies returning an object\n   * made up of selector results.\n   *\n   * @param inputSelectorsObject - A key value pair consisting of input selectors.\n   * @param selectorCreator - A custom selector creator function. It defaults to `createSelector`.\n   * @returns A memoized structured selector.\n   *\n   * @example\n   * <caption>Modern Use Case</caption>\n   * ```ts\n   * import { createSelector, createStructuredSelector } from 'reselect'\n   *\n   * interface RootState {\n   *   todos: {\n   *     id: number\n   *     completed: boolean\n   *     title: string\n   *     description: string\n   *   }[]\n   *   alerts: { id: number; read: boolean }[]\n   * }\n   *\n   * // This:\n   * const structuredSelector = createStructuredSelector(\n   *   {\n   *     todos: (state: RootState) => state.todos,\n   *     alerts: (state: RootState) => state.alerts,\n   *     todoById: (state: RootState, id: number) => state.todos[id]\n   *   },\n   *   createSelector\n   * )\n   *\n   * // Is essentially the same as this:\n   * const selector = createSelector(\n   *   [\n   *     (state: RootState) => state.todos,\n   *     (state: RootState) => state.alerts,\n   *     (state: RootState, id: number) => state.todos[id]\n   *   ],\n   *   (todos, alerts, todoById) => {\n   *     return {\n   *       todos,\n   *       alerts,\n   *       todoById\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @example\n   * <caption>In your component:</caption>\n   * ```tsx\n   * import type { RootState } from 'createStructuredSelector/modernUseCase'\n   * import { structuredSelector } from 'createStructuredSelector/modernUseCase'\n   * import type { FC } from 'react'\n   * import { useSelector } from 'react-redux'\n   *\n   * interface Props {\n   *   id: number\n   * }\n   *\n   * const MyComponent: FC<Props> = ({ id }) => {\n   *   const { todos, alerts, todoById } = useSelector((state: RootState) =>\n   *     structuredSelector(state, id)\n   *   )\n   *\n   *   return (\n   *     <div>\n   *       Next to do is:\n   *       <h2>{todoById.title}</h2>\n   *       <p>Description: {todoById.description}</p>\n   *       <ul>\n   *         <h3>All other to dos:</h3>\n   *         {todos.map(todo => (\n   *           <li key={todo.id}>{todo.title}</li>\n   *         ))}\n   *       </ul>\n   *     </div>\n   *   )\n   * }\n   * ```\n   *\n   * @example\n   * <caption>Simple Use Case</caption>\n   * ```ts\n   * const selectA = state => state.a\n   * const selectB = state => state.b\n   *\n   * // The result function in the following selector\n   * // is simply building an object from the input selectors\n   * const structuredSelector = createSelector(selectA, selectB, (a, b) => ({\n   *   a,\n   *   b\n   * }))\n   *\n   * const result = structuredSelector({ a: 1, b: 2 }) // will produce { x: 1, y: 2 }\n   * ```\n   *\n   * @template InputSelectorsObject - The shape of the input selectors object.\n   * @template MemoizeFunction - The type of the memoize function that is used to create the structured selector. It defaults to `weakMapMemoize`.\n   * @template ArgsMemoizeFunction - The type of the of the memoize function that is used to memoize the arguments passed into the generated structured selector. It defaults to `weakMapMemoize`.\n   *\n   * @see {@link https://reselect.js.org/api/createStructuredSelector `createStructuredSelector`}\n   */\n  <\n    InputSelectorsObject extends RootStateSelectors<RootState> = RootStateSelectors<RootState>,\n    MemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize,\n    ArgsMemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize\n  >(\n    inputSelectorsObject: InputSelectorsObject,\n    selectorCreator?: CreateSelectorFunction<\n      MemoizeFunction,\n      ArgsMemoizeFunction\n    >\n  ) => OutputSelector<\n    ObjectValuesToTuple<InputSelectorsObject>,\n    Simplify<SelectorResultsMap<InputSelectorsObject>>,\n    MemoizeFunction,\n    ArgsMemoizeFunction\n  > &\n    InterruptRecursion\n\n/**\n * Represents an object where each property is a selector function.\n *\n * @template StateType - The type of state that all the selectors operate on.\n *\n * @public\n */\nexport type SelectorsObject<StateType = any> = Record<\n  string,\n  Selector<StateType>\n>\n\n/**\n * It provides a way to create structured selectors.\n * The structured selector can take multiple input selectors\n * and map their output to an object with specific keys.\n *\n * @template StateType - The type of state that the structured selectors created with this structured selector creator will operate on.\n *\n * @see {@link https://reselect.js.org/api/createStructuredSelector `createStructuredSelector`}\n *\n * @public\n */\nexport interface StructuredSelectorCreator<StateType = any> {\n  /**\n   * A convenience function that simplifies returning an object\n   * made up of selector results.\n   *\n   * @param inputSelectorsObject - A key value pair consisting of input selectors.\n   * @param selectorCreator - A custom selector creator function. It defaults to `createSelector`.\n   * @returns A memoized structured selector.\n   *\n   * @example\n   * <caption>Modern Use Case</caption>\n   * ```ts\n   * import { createSelector, createStructuredSelector } from 'reselect'\n   *\n   * interface RootState {\n   *   todos: {\n   *     id: number\n   *     completed: boolean\n   *     title: string\n   *     description: string\n   *   }[]\n   *   alerts: { id: number; read: boolean }[]\n   * }\n   *\n   * // This:\n   * const structuredSelector = createStructuredSelector(\n   *   {\n   *     todos: (state: RootState) => state.todos,\n   *     alerts: (state: RootState) => state.alerts,\n   *     todoById: (state: RootState, id: number) => state.todos[id]\n   *   },\n   *   createSelector\n   * )\n   *\n   * // Is essentially the same as this:\n   * const selector = createSelector(\n   *   [\n   *     (state: RootState) => state.todos,\n   *     (state: RootState) => state.alerts,\n   *     (state: RootState, id: number) => state.todos[id]\n   *   ],\n   *   (todos, alerts, todoById) => {\n   *     return {\n   *       todos,\n   *       alerts,\n   *       todoById\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @example\n   * <caption>In your component:</caption>\n   * ```tsx\n   * import type { RootState } from 'createStructuredSelector/modernUseCase'\n   * import { structuredSelector } from 'createStructuredSelector/modernUseCase'\n   * import type { FC } from 'react'\n   * import { useSelector } from 'react-redux'\n   *\n   * interface Props {\n   *   id: number\n   * }\n   *\n   * const MyComponent: FC<Props> = ({ id }) => {\n   *   const { todos, alerts, todoById } = useSelector((state: RootState) =>\n   *     structuredSelector(state, id)\n   *   )\n   *\n   *   return (\n   *     <div>\n   *       Next to do is:\n   *       <h2>{todoById.title}</h2>\n   *       <p>Description: {todoById.description}</p>\n   *       <ul>\n   *         <h3>All other to dos:</h3>\n   *         {todos.map(todo => (\n   *           <li key={todo.id}>{todo.title}</li>\n   *         ))}\n   *       </ul>\n   *     </div>\n   *   )\n   * }\n   * ```\n   *\n   * @example\n   * <caption>Simple Use Case</caption>\n   * ```ts\n   * const selectA = state => state.a\n   * const selectB = state => state.b\n   *\n   * // The result function in the following selector\n   * // is simply building an object from the input selectors\n   * const structuredSelector = createSelector(selectA, selectB, (a, b) => ({\n   *   a,\n   *   b\n   * }))\n   *\n   * const result = structuredSelector({ a: 1, b: 2 }) // will produce { x: 1, y: 2 }\n   * ```\n   *\n   * @template InputSelectorsObject - The shape of the input selectors object.\n   * @template MemoizeFunction - The type of the memoize function that is used to create the structured selector. It defaults to `weakMapMemoize`.\n   * @template ArgsMemoizeFunction - The type of the of the memoize function that is used to memoize the arguments passed into the generated structured selector. It defaults to `weakMapMemoize`.\n   *\n   * @see {@link https://reselect.js.org/api/createStructuredSelector `createStructuredSelector`}\n   */\n  <\n    InputSelectorsObject extends SelectorsObject<StateType>,\n    MemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize,\n    ArgsMemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize\n  >(\n    inputSelectorsObject: InputSelectorsObject,\n    selectorCreator?: CreateSelectorFunction<\n      MemoizeFunction,\n      ArgsMemoizeFunction\n    >\n  ): OutputSelector<\n    ObjectValuesToTuple<InputSelectorsObject>,\n    Simplify<SelectorResultsMap<InputSelectorsObject>>,\n    MemoizeFunction,\n    ArgsMemoizeFunction\n  > &\n    InterruptRecursion\n\n  /**\n   * Creates a \"pre-typed\" version of\n   * {@linkcode createStructuredSelector createStructuredSelector}\n   * where the `state` type is predefined.\n   *\n   * This allows you to set the `state` type once, eliminating the need to\n   * specify it with every\n   * {@linkcode createStructuredSelector createStructuredSelector} call.\n   *\n   * @returns A pre-typed `createStructuredSelector` with the state type already defined.\n   *\n   * @example\n   * ```ts\n   * import { createStructuredSelector } from 'reselect'\n   *\n   * export interface RootState {\n   *   todos: { id: number; completed: boolean }[]\n   *   alerts: { id: number; read: boolean }[]\n   * }\n   *\n   * export const createStructuredAppSelector =\n   *   createStructuredSelector.withTypes<RootState>()\n   *\n   * const structuredAppSelector = createStructuredAppSelector({\n   *   // Type of `state` is set to `RootState`, no need to manually set the type\n   *   todos: state => state.todos,\n   *   alerts: state => state.alerts,\n   *   todoById: (state, id: number) => state.todos[id]\n   * })\n   *\n   * ```\n   * @template OverrideStateType - The specific type of state used by all structured selectors created with this structured selector creator.\n   *\n   * @see {@link https://reselect.js.org/api/createstructuredselector#defining-a-pre-typed-createstructuredselector `createSelector.withTypes`}\n   *\n   * @since 5.1.0\n   */\n  withTypes: <\n    OverrideStateType extends StateType\n  >() => StructuredSelectorCreator<OverrideStateType>\n}\n\n/**\n * A convenience function that simplifies returning an object\n * made up of selector results.\n *\n * @param inputSelectorsObject - A key value pair consisting of input selectors.\n * @param selectorCreator - A custom selector creator function. It defaults to `createSelector`.\n * @returns A memoized structured selector.\n *\n * @example\n * <caption>Modern Use Case</caption>\n * ```ts\n * import { createSelector, createStructuredSelector } from 'reselect'\n *\n * interface RootState {\n *   todos: {\n *     id: number\n *     completed: boolean\n *     title: string\n *     description: string\n *   }[]\n *   alerts: { id: number; read: boolean }[]\n * }\n *\n * // This:\n * const structuredSelector = createStructuredSelector(\n *   {\n *     todos: (state: RootState) => state.todos,\n *     alerts: (state: RootState) => state.alerts,\n *     todoById: (state: RootState, id: number) => state.todos[id]\n *   },\n *   createSelector\n * )\n *\n * // Is essentially the same as this:\n * const selector = createSelector(\n *   [\n *     (state: RootState) => state.todos,\n *     (state: RootState) => state.alerts,\n *     (state: RootState, id: number) => state.todos[id]\n *   ],\n *   (todos, alerts, todoById) => {\n *     return {\n *       todos,\n *       alerts,\n *       todoById\n *     }\n *   }\n * )\n * ```\n *\n * @see {@link https://reselect.js.org/api/createStructuredSelector `createStructuredSelector`}\n *\n * @public\n */\nexport const createStructuredSelector: StructuredSelectorCreator =\n  Object.assign(\n    <\n      InputSelectorsObject extends SelectorsObject,\n      MemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize,\n      ArgsMemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize\n    >(\n      inputSelectorsObject: InputSelectorsObject,\n      selectorCreator: CreateSelectorFunction<\n        MemoizeFunction,\n        ArgsMemoizeFunction\n      > = createSelector as CreateSelectorFunction<\n        MemoizeFunction,\n        ArgsMemoizeFunction\n      >\n    ) => {\n      assertIsObject(\n        inputSelectorsObject,\n        'createStructuredSelector expects first argument to be an object ' +\n          `where each property is a selector, instead received a ${typeof inputSelectorsObject}`\n      )\n      const inputSelectorKeys = Object.keys(inputSelectorsObject)\n      const dependencies = inputSelectorKeys.map(\n        key => inputSelectorsObject[key]\n      )\n      const structuredSelector = selectorCreator(\n        dependencies,\n        (...inputSelectorResults: any[]) => {\n          return inputSelectorResults.reduce((composition, value, index) => {\n            composition[inputSelectorKeys[index]] = value\n            return composition\n          }, {})\n        }\n      )\n      return structuredSelector\n    },\n    { withTypes: () => createStructuredSelector }\n  ) as StructuredSelectorCreator\n","import { AppRootStateType } from \"./redux-store\";\r\nimport { createSelector } from \"reselect\";\r\n\r\nconst getUsersSelector = (state: AppRootStateType) => {\r\n  return state.usersPage.users;\r\n};\r\n\r\nexport const getPageSize = (state: AppRootStateType) => {\r\n  return state.usersPage.pageSize;\r\n};\r\n\r\nexport const getTotalUsersCount = (state: AppRootStateType) => {\r\n  return state.usersPage.totalUsersCount;\r\n};\r\n\r\nexport const getCurrentPage = (state: AppRootStateType) => {\r\n  return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getIsFetching = (state: AppRootStateType) => {\r\n  return state.usersPage.isFetching;\r\n};\r\n\r\nexport const getFollowingProgress = (state: AppRootStateType) => {\r\n  return state.usersPage.followingProgress;\r\n};\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n  // fake filter\r\n  return users.filter((u) => u);\r\n});\r\n","import { connect } from \"react-redux\";\r\nimport { AppRootStateType } from \"../../redux/redux-store\";\r\nimport {\r\n  followSuccess,\r\n  followUserTC,\r\n  getUsersTC,\r\n  toggleFollowingProgress,\r\n  unfollowSuccess,\r\n  unfollowUserTC,\r\n  UserType,\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport { Users } from \"./Users\";\r\nimport { compose } from \"redux\";\r\nimport {\r\n  getCurrentPage,\r\n  getFollowingProgress,\r\n  getIsFetching,\r\n  getPageSize, getTotalUsersCount,\r\n  getUsers\r\n} from \"../../redux/users-selectors\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\n\r\nclass UsersContainer extends React.Component<UsersContainerPropsType> {\r\n  componentDidMount() {\r\n    this.props.getUsersTC(this.props.currentPage, this.props.pageSize);\r\n  }\r\n\r\n  onClickPageChanges = (pageNumber: number) => {\r\n    this.props.getUsersTC(pageNumber, this.props.pageSize);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.props.isFetching ? <Preloader /> : null}\r\n        <Users\r\n          users={this.props.users}\r\n          currentPage={this.props.currentPage}\r\n          totalUsersCount={this.props.totalUsersCount}\r\n          pageSize={this.props.pageSize}\r\n          onClickPageChanges={this.onClickPageChanges}\r\n          followingProgress={this.props.followingProgress}\r\n          followUser={this.props.followUserTC}\r\n          unfollowUser={this.props.unfollowUserTC}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n  return {\r\n    users: getUsers(state),\r\n    pageSize: getPageSize(state),\r\n    totalUsersCount: getTotalUsersCount(state),\r\n    currentPage: getCurrentPage(state),\r\n    isFetching: getIsFetching(state),\r\n    followingProgress: getFollowingProgress(state),\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  withAuthRedirect,\r\n  connect(mapStateToProps, {\r\n    followSuccess,\r\n    unfollowSuccess,\r\n    toggleFollowingProgress,\r\n    getUsersTC,\r\n    followUserTC,\r\n    unfollowUserTC,\r\n  }),\r\n)(UsersContainer);\r\n\r\ntype MapStatePropsType = {\r\n  users: Array<UserType>\r\n  pageSize: number\r\n  totalUsersCount: number\r\n  currentPage: number\r\n  isFetching: boolean\r\n  followingProgress: Array<string>\r\n};\r\ntype MapDispatchPropsType = {\r\n  followSuccess: (userId: string) => void\r\n  unfollowSuccess: (userId: string) => void\r\n  toggleFollowingProgress: (isFetching: boolean, userId: string) => void\r\n  getUsersTC: (currentPage: number, pageSize: number) => void\r\n  followUserTC: (userId: string) => void\r\n  unfollowUserTC: (userId: string) => void\r\n};\r\ntype UsersContainerPropsType = MapStatePropsType & MapDispatchPropsType;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppRootStateType } from \"../redux/redux-store\";\r\nimport { connect } from \"react-redux\";\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean;\r\n};\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => ({ isAuth: state.auth.isAuth });\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n  class RedirectComponent extends React.Component<MapStatePropsType> {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to={\"/login\"} />;\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  return connect(mapStateToProps)(RedirectComponent);\r\n};\r\n","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = '';\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (arg) {\n\t\t\t\tclasses = appendClass(classes, parseValue(arg));\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction parseValue (arg) {\n\t\tif (typeof arg === 'string' || typeof arg === 'number') {\n\t\t\treturn arg;\n\t\t}\n\n\t\tif (typeof arg !== 'object') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (Array.isArray(arg)) {\n\t\t\treturn classNames.apply(null, arg);\n\t\t}\n\n\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\treturn arg.toString();\n\t\t}\n\n\t\tvar classes = '';\n\n\t\tfor (var key in arg) {\n\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\tclasses = appendClass(classes, key);\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction appendClass (value, newClass) {\n\t\tif (!newClass) {\n\t\t\treturn value;\n\t\t}\n\t\n\t\tif (value) {\n\t\t\treturn value + ' ' + newClass;\n\t\t}\n\t\n\t\treturn value + newClass;\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n"],"names":["Paginator","props","totalItemsCount","pageSize","onClickPageChanges","currentPage","_props$portionSize","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","_useState","useState","_useState2","_slicedToArray","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","_jsxs","className","styles","children","_jsx","onClick","filter","p","map","cn","_defineProperty","e","User","_ref","user","followingProgress","unfollowUser","followUser","NavLink","to","concat","id","src","photos","small","defaultAvatar","width","height","alt","followed","disabled","some","name","status","v1","Users","users","totalUsersCount","assertIsFunction","func","errorMessage","arguments","length","undefined","TypeError","ensureIsArray","item","Array","isArray","getDependencies","createSelectorArgs","dependencies","array","every","itemTypes","join","assertIsArrayOfFunctions","Symbol","Object","getPrototypeOf","Ref","WeakRef","StrongRef","value","_classCallCheck","_createClass","key","this","UNTERMINATED","TERMINATED","createCacheNode","s","v","o","weakMapMemoize","lastResult","options","fnNode","resultEqualityCheck","resultsCount","memoized","cacheNode","l","arg","objectCache","WeakMap","objectNode","get","set","primitiveCache","Map","primitiveNode","result","terminatedNode","apply","_lastResult$deref","_lastResult","_lastResult$deref2","lastResultValue","deref","call","clearCache","resetResultsCount","createSelectorCreator","memoizeOrOptions","_len","memoizeOptionsFromArgs","_key5","createSelectorCreatorOptions","memoize","memoizeOptions","createSelector2","_len2","_key6","recomputations","dependencyRecomputations","directlyPassedOptions","resultFunc","pop","combinedOptions","_objectSpread","_combinedOptions$memo","_combinedOptions$args","argsMemoize","_combinedOptions$args2","argsMemoizeOptions","finalMemoizeOptions","devModeChecks","finalArgsMemoizeOptions","memoizedResultFunc","_toConsumableArray","selector","inputSelectorResults","inputSelectorArgs","collectInputSelectorResults","assign","resetDependencyRecomputations","resetRecomputations","withTypes","createSelector","createStructuredSelector","inputSelectorsObject","selectorCreator","object","assertIsObject","inputSelectorKeys","keys","structuredSelector","_len3","_key7","reduce","composition","index","getPageSize","state","usersPage","getTotalUsersCount","getCurrentPage","getIsFetching","isFetching","getFollowingProgress","getUsers","u","UsersContainer","_React$Component","_inherits","_super","_createSuper","_this","args","_key","pageNumber","getUsersTC","_Fragment","Preloader","followUserTC","unfollowUserTC","React","compose","withAuthRedirect","connect","followSuccess","unfollowSuccess","toggleFollowingProgress","mapStateToProps","isAuth","auth","Component","RedirectComponent","Redirect","hasOwn","hasOwnProperty","classNames","classes","appendClass","parseValue","toString","prototype","includes","newClass","module","exports","default"],"sourceRoot":""}